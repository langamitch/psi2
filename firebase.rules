rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Utility: check if a session is active (expiresAt > request.time)
    function isSessionActive(session) {
      return session.data.expiresAt != null && session.data.expiresAt > request.time;
    }

    // Utility: validate authenticated student's identity matches provided data
    function doesRegistrationMatchUser(userId, reg) {
      return exists(/databases/$(database)/documents/students/$(userId))
        && get(/databases/$(database)/documents/students/$(userId)).data.studentId == reg.studentId
        && get(/databases/$(database)/documents/students/$(userId)).data.name == reg.studentName;
    }

    // Lecturers can only read and write their own data (modules, etc.).
    match /lecturers/{lecturerId}/{documents=**} {
      allow read, write: if request.auth != null && request.auth.uid == lecturerId;
    }

    // Students can only read and write their own profile data
    match /students/{userId} {
      // Students can read and update their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation during import/setup (admin operations)
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the sessions collection
    match /sessions/{sessionId} {
      // Any authenticated user (lecturers and students) can read session data.
      allow read: if request.auth != null;

      // Only authenticated lecturers can create a session; lecturerId must match user
      allow create: if request.auth != null && request.resource.data.lecturerId == request.auth.uid
        && request.resource.data.pin is string
        && request.resource.data.moduleId is string
        && request.resource.data.expiresAt != null;

      // Only the creating lecturer can update (e.g., end session)
      allow update: if request.auth != null && resource.data.lecturerId == request.auth.uid;

      // No deletes to preserve records
      allow delete: if false;

      // Session registrations subcollection
      match /registrations/{registrationId} {
        // Lecturer can read registrations for their session
        allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.lecturerId == request.auth.uid;

        // Student can read own registration by matching studentId
        allow read: if request.auth != null
          && exists(/databases/$(database)/documents/students/$(request.auth.uid))
          && get(/databases/$(database)/documents/students/$(request.auth.uid)).data.studentId == resource.data.studentId;

        // Students can create a registration if session active and identity matches
        allow create: if request.auth != null
          && isSessionActive(get(/databases/$(database)/documents/sessions/$(sessionId)))
          && doesRegistrationMatchUser(request.auth.uid, request.resource.data);

        // No updates/deletes of registrations
        allow update, delete: if false;
      }
    }

    // Attendance submissions per module
    match /attendance/{moduleId} {
      // Read access for authenticated users
      allow read: if request.auth != null;

      match /submissions/{submissionId} {
        allow read: if request.auth != null;

        // Students can create submission if their identity matches and session is valid for this module
        allow create: if request.auth != null
          && doesRegistrationMatchUser(request.auth.uid, request.resource.data)
          && exists(/databases/$(database)/documents/sessions/$(request.resource.data.sessionId))
          && get(/databases/$(database)/documents/sessions/$(request.resource.data.sessionId)).data.moduleId == moduleId
          && isSessionActive(get(/databases/$(database)/documents/sessions/$(request.resource.data.sessionId)));

        allow update, delete: if false;
      }
    }
  }
}