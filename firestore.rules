rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Lecturers can only read and write their own data (modules, etc.).
    match /lecturers/{lecturerId}/{documents=**} {
      allow read, write: if request.auth != null && request.auth.uid == lecturerId;
    }

    // Students can only read and write their own profile data
    match /students/{userId} {
      // Students can read and update their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation during import/setup (admin operations)
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading student profiles for login lookup by student number
      // This is needed for the authentication flow where we look up email by student ID
      allow read: if request.auth != null;
    }

    // Rules for the sessions collection
    match /sessions/{sessionId} {
      // Any authenticated user (lecturers and students) can read session data. 
      // This is needed for the dashboard to check for active sessions and for 
      // students to find sessions by PIN.
      allow read: if request.auth != null;

      // Only authenticated lecturers can create a session.
      // We verify the lecturerId in the new document matches the user's ID.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.lecturerId;

      // Only the lecturer who created the session can update it (e.g., to end it early).
      allow update: if request.auth != null && request.auth.uid == resource.data.lecturerId;

      // Deleting sessions is disallowed to preserve records.
      allow delete: if false;

      // Rules for the registrations subcollection within a session
      match /registrations/{registrationId} {
        // The lecturer who owns the session can view all registered students
        allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.lecturerId == request.auth.uid;
        
        // Students can read their own registration records by matching their student ID
        allow read: if request.auth != null && 
          exists(/databases/$(database)/documents/students/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/students/$(request.auth.uid)).data.studentId == resource.data.studentId;

        // Authenticated students can register for sessions, but only if:
        // 1. The session has not expired
        // 2. They are submitting their own student information (verified against their profile)
        // 3. The student profile exists and matches the registration data
        allow create: if request.auth != null 
          && get(/databases/$(database)/documents/sessions/$(sessionId)).data.expiresAt > request.time
          && isValidStudentRegistration(request.auth.uid, request.resource.data);

        // Updating or deleting a registration is not allowed to maintain integrity
        allow update, delete: if false;
      }
    }

    // Helper function to validate student registration data
    function isValidStudentRegistration(userId, registrationData) {
      let studentDoc = get(/databases/$(database)/documents/students/$(userId));
      
      // Verify the registration data matches the authenticated student's profile
      return exists(/databases/$(database)/documents/students/$(userId))
        && studentDoc.data.studentId == registrationData.studentId
        && studentDoc.data.name == registrationData.studentName;
    }

    // Allow reading any student document for authentication lookup purposes
    // This enables the login flow where we search for students by studentId
    match /students/{document=**} {
      allow read: if request.auth != null;
    }
  }
}
